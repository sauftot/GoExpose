package main

import (
	"example.com/reverseproxy/cmd/internal"
	"fmt"
	"sync"
)

type GeClient struct {
	locPort uint16
	net     *Networker
	wg      *sync.WaitGroup
}

func newGeClient(w *sync.WaitGroup) *GeClient {
	return &GeClient{
		locPort: 0,
		net:     newNetworker(w),
		wg:      w,
	}
}

func (c *GeClient) run(stop <-chan struct{}, input <-chan []string) {
	defer c.wg.Done()
	for {
		select {
		case <-stop:
			c.net.paired = false
			return
		case userIO := <-input:
			c.handleInput(userIO)
		}
	}
}

/*
helper function for run, handles user console input
*/
func (c *GeClient) handleInput(i []string) {
	switch i[0] {
	case "pair":
		if len(i) != 2 {
			fmt.Println("ERROR: handleInput: invalid number of arguments! use 'pair <ip>'")
		} else {
			if !c.net.paired {
				fmt.Println("HANDLEINPUT: Attempting to pair with " + i[1] + ". Please wait!")
				err := c.net.pair(i[1])
				if err != nil {
					fmt.Println("ERROR: handleInput: failed to pair with " + i[1] + "!\n" + err.Error())
				} else {
					fmt.Println("HANDLEINPUT: Successfully paired with " + i[1] + "!")
				}
			} else {
				fmt.Println("ERROR: handleInput: client is already paired to a server!\n Use 'unpair' to unpair from the current server")
			}
		}
	case "unpair":
		if len(i) != 1 {
			fmt.Println("ERROR: handleInput: invalid number of arguments! use 'unpair'")
		} else {
			if c.net.paired {
				fmt.Println("HANDLEINPUT: Unpairing from server. Please wait!")
				err := c.net.unpair()
				if err != nil {
					fmt.Println("ERROR: handleInput: failed to unpair from server!\n" + err.Error())
				} else {
					fmt.Println("HANDLEINPUT: Successfully unpaired from server!")
				}
			} else {
				fmt.Println("ERROR: handleInput: client is not paired to a server!")
			}
		}
	case "expose":
		if c.net.paired {
			if len(i) != 3 {
				fmt.Println("ERROR: handleInput: invalid number of arguments! use 'expose <tcp/udp> <port>'")
			} else {
				port, err := internal.CheckPort(i[2])
				if err != nil {
					fmt.Println("ERROR: handleInput: " + err.Error())
					return
				}
				if i[1] == "tcp" && !c.net.expTCP[port] {
					err := c.net.exposeTCP(port)
					if err != nil {
						fmt.Println("ERROR: handleInput: failed to expose TCP port!" + err.Error())
						return
					}
				} else if i[1] == "udp" && !c.net.expUDP[port] {
					err := c.net.exposeUDP(port)
					if err != nil {
						fmt.Println("ERROR: handleInput: failed to expose UDP port!" + err.Error())
						return
					}
				} else {
					fmt.Println("ERROR: handleInput: invalid protocol or port already exposed!")
				}
			}
		} else {
			fmt.Println("ERROR: handleInput: client is not paired to a server!")
		}
	case "hide":
		if c.net.paired {
			if len(i) != 3 {
				fmt.Println("ERROR: handleInput: invalid number of arguments! use 'expose <tcp/udp> <port>'")
			} else {
				port, err := internal.CheckPort(i[2])
				if err != nil {
					fmt.Println("ERROR: handleInput: " + err.Error())
					return
				}
				if i[1] == "tcp" && c.net.expTCP[port] {
					err := c.net.hideTCP(port)
					if err != nil {
						fmt.Println("ERROR: handleInput: failed to hide TCP port!" + err.Error())
						return
					}
				} else if i[1] == "udp" && c.net.expUDP[port] {
					err := c.net.hideUDP(port)
					if err != nil {
						fmt.Println("ERROR: handleInput: failed to hide UDP port!" + err.Error())
						return
					}
				} else {
					fmt.Println("ERROR: handleInput: invalid protocol or port not exposed!")
				}
			}
		} else {
			fmt.Println("ERROR: handleInput: client is not paired to a server!")
		}
	}
}
